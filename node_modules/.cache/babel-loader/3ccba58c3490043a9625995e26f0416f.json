{"ast":null,"code":"var _jsxFileName = \"/media/shiju/A052C83E52C81AC4/practice/netflix-react/netflix/src/components/Rowpost.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport YouTube from 'react-youtube';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Rowpost = _ref => {\n  _s();\n\n  let {\n    movies,\n    title\n  } = _ref;\n  const [youtubeUrl, setyoutubeUrl] = useState();\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rowpost\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"movie mt-3\",\n        style: {\n          color: \"white\"\n        },\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"posters\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"poster\",\n          children: movies && movies.map((item, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n            onClick: () => {\n              axios.get(`https://api.themoviedb.org/3/movie/${item.id}/videos?api_key=f0bde51db52e9c6388d864e6ab433ac6&language=en-US`).then(Response => {\n                if (Response.data.results.length !== 0) {\n                  setyoutubeUrl(Response.data.results);\n                } else alert(\"no videos available for selected movie\");\n              }).catch(error => {\n                console.log(\"error message\", error);\n              });\n            },\n            alt: \"kjasdklf\",\n            src: `https://image.tmdb.org/t/p/w500/${item.backdrop_path}`\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), youtubeUrl && youtubeUrl.length !== 0 && /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: youtubeUrl[0].key,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(Rowpost, \"RYHQshCgtmVjMKBZ8/4kPEB433Q=\");\n\n_c = Rowpost;\n\nvar _c;\n\n$RefreshReg$(_c, \"Rowpost\");","map":{"version":3,"sources":["/media/shiju/A052C83E52C81AC4/practice/netflix-react/netflix/src/components/Rowpost.js"],"names":["React","useState","YouTube","axios","Rowpost","movies","title","youtubeUrl","setyoutubeUrl","opts","height","width","playerVars","autoplay","color","map","item","index","get","id","then","Response","data","results","length","alert","catch","error","console","log","backdrop_path","key"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,OAAO,MAAMC,OAAO,GAAG,QAAoB;AAAA;;AAAA,MAAnB;AAACC,IAAAA,MAAD;AAAQC,IAAAA;AAAR,GAAmB;AACzC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,EAA5C;AAIA,QAAMQ,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACV;AACAC,MAAAA,QAAQ,EAAE;AAFA;AAHD,GAAb;AAQA,sBACE;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAG,QAAA,SAAS,EAAC,YAAb;AAA0B,QAAA,KAAK,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAT,SAAjC;AAAA,kBACGR;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,QAAf;AAAA,oBACGD,MAAM,IACLA,MAAM,CAACU,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,kBACT;AAEE,YAAA,OAAO,EAAE,MAAM;AACbd,cAAAA,KAAK,CACFe,GADH,CAEK,sCAAqCF,IAAI,CAACG,EAAG,iEAFlD,EAIGC,IAJH,CAISC,QAAD,IAAc;AAClB,oBAAIA,QAAQ,CAACC,IAAT,CAAcC,OAAd,CAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACtChB,kBAAAA,aAAa,CAACa,QAAQ,CAACC,IAAT,CAAcC,OAAf,CAAb;AACD,iBAFD,MAEOE,KAAK,CAAC,wCAAD,CAAL;AACR,eARH,EASGC,KATH,CASUC,KAAD,IAAW;AAChBC,gBAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,KAA7B;AACD,eAXH;AAYD,aAfH;AAgBE,YAAA,GAAG,EAAC,UAhBN;AAiBE,YAAA,GAAG,EAAG,mCAAkCX,IAAI,CAACc,aAAc;AAjB7D,aACOb,KADP;AAAA;AAAA;AAAA;AAAA,kBADF;AAFJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAJF,EA8BGV,UAAU,IAAIA,UAAU,CAACiB,MAAX,KAAsB,CAApC,iBACC,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEjB,UAAU,CAAC,CAAD,CAAV,CAAcwB,GAAhC;AAAqC,QAAA,IAAI,EAAEtB;AAA3C;AAAA;AAAA;AAAA;AAAA,cA/BJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AAsED,CAnFM;;GAAML,O;;KAAAA,O","sourcesContent":["import React,{useState} from 'react'\nimport YouTube from 'react-youtube';\nimport axios from 'axios';\n\nexport const Rowpost = ({movies,title}) => {\n  const [youtubeUrl, setyoutubeUrl] = useState();\n  \n  \n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      // https://developers.google.com/youtube/player_parameters\n      autoplay: 1,\n    },\n  };\n  return (\n    <>\n      <div className=\"rowpost\">\n        <p className=\"movie mt-3\" style={{ color: \"white\" }}>\n          {title}\n        </p>\n        <div className=\"posters\">\n          <div className=\"poster\">\n            {movies &&\n              movies.map((item, index) => (\n                <img\n                  key={index}\n                  onClick={() => {\n                    axios\n                      .get(\n                        `https://api.themoviedb.org/3/movie/${item.id}/videos?api_key=f0bde51db52e9c6388d864e6ab433ac6&language=en-US`\n                      )\n                      .then((Response) => {\n                        if (Response.data.results.length !== 0) {\n                          setyoutubeUrl(Response.data.results);\n                        } else alert(\"no videos available for selected movie\");\n                      })\n                      .catch((error) => {\n                        console.log(\"error message\", error);\n                      });\n                  }}\n                  alt=\"kjasdklf\"\n                  src={`https://image.tmdb.org/t/p/w500/${item.backdrop_path}`}\n                />\n              ))}\n          </div>\n        </div>\n        {youtubeUrl && youtubeUrl.length !== 0 && (\n          <YouTube videoId={youtubeUrl[0].key} opts={opts} />\n        )}\n      </div>\n      {/* trending movies */}\n      {/* <div className=\"rowpost\">\n        <p className=\"movie mt-3\" style={{ color: \"white\" }}>\n          Trending Movies\n        </p>\n        <div className=\"posters\">\n          <div className=\"poster\">\n            {trendingMovies &&\n              trendingMovies.results.map((item, index) => (\n                <img\n                  onClick={() => {\n                    axios\n                      .get(\n                        `https://api.themoviedb.org/3/movie/${item.id}/videos?api_key=f0bde51db52e9c6388d864e6ab433ac6&language=en-US`\n                      )\n                      .then((Response) => {\n                        if (Response.data.results.length !==0) {\n                          setyoutubeUrl(Response.data.results);\n                        } else alert(\"no videos available for selected movie\");\n                      })\n                      .catch((error) => {\n                        console.log(\"error message\", error);\n                      });\n                  }}\n                  key={index}\n                  alt=\"ijlskdf\"\n                  src={`https://image.tmdb.org/t/p/w500/${item.poster_path}`}\n                />\n              ))}\n          </div>\n        </div>\n      </div> */}\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}